
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1001] =
    {   0,
      105,  103,  104,  102,  103,  104,  101,  104,  103,  104,
        8,  103,  104,  103,  104,  103,  104,    5,  103,  104,
      103,  104,  103,  104,  103,  104,  103,  104,  103,  104,
       97,  103,  104,  103,  104,  103,  104,  103,  104,  103,
      104,   98,  103,  104,   98,  103,  104,  103,  104,  103,
      104,   98,  103,  104,   98,  103,  104,   98,  103,  104,
       98,  103,  104,   98,  103,  104,   98,  103,  104,   98,
      103,  104,   98,  103,  104,   98,  103,  104,   98,  103,
      104,   98,  103,  104,   98,  103,  104,   98,  103,  104,
       98,  103,  104,   98,  103,  104,   98,  103,  104,   98,

      103,  104,   98,  103,  104,   98,  103,  104,  103,  104,
      103,  104,  102,  103,  104,    1,  101,  104,  103,  104,
        8,  103,  104,    2,  103,  104,  103,  104,  103,  104,
        5,  103,  104,  103,  104,  103,  104,  103,  104,  103,
      104,  103,  104,   97,  103,  104,  103,  104,  103,  104,
      103,  104,  103,  104,   98,  103,  104,   98,  103,  104,
      103,  104,  103,  104,   98,  103,  104,   98,  103,  104,
       98,  103,  104,   98,  103,  104,   98,  103,  104,   98,
      103,  104,   98,  103,  104,   98,  103,  104,   98,  103,
      104,   98,  103,  104,   98,  103,  104,   98,  103,  104,

       98,  103,  104,   98,  103,  104,   98,  103,  104,   98,
      103,  104,   98,  103,  104,   98,  103,  104,   98,  103,
      104,  103,  104,  102,   77,    8,    6,    7,   91,   80,
       93,    5,    3,    4,   89,   82,   87,   83,   88,   85,
       86,   97,   90,   97,   97,   72,   74,   78,   76,   79,
       75,   98,    8,    5,   99,   99,   92,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   22,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   35,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   94,   81,    1,  102,    2,   77,    8,    6,
        7,    2,   91,   80,   93,    5,    3,    4,   89,   82,
       87,   83,   88,   85,   86,   97,   90,   97,   97,   72,
       74,   78,   76,   79,   75,   98,    8,    5,   99,   99,
       92,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       22,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   35,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   94,   81,   84,   73,
       96,   95,   99,   99,    9,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   32,   98,   98,   98,   98,   37,
       98,   98,   98,   98,   41,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   60,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   84,   73,   96,   95,   99,   99,
        9,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       32,   98,   98,   98,   98,   37,   98,   98,   98,   98,
       41,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   60,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       99,   10,   98,   11,   98,   98,   13,   98,   98,   15,
       98,   98,   98,   98,   98,   98,   98,   98,   25,   98,
       26,   98,   98,   98,   98,   98,   98,   98,   34,   98,
       98,   38,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   57,
       98,   98,   59,   98,   98,   98,   98,   98,   98,   68,
       98,   98,   98,   98,   99,   10,   98,   11,   98,   98,
       13,   98,   98,   15,   98,   98,   98,   98,   98,   98,

       98,   98,   25,   98,   26,   98,   98,   98,   98,   98,
       98,   98,   34,   98,   98,   38,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   57,   98,   98,   59,   98,   98,   98,
       98,   98,   98,   68,   98,   98,   98,   98,   12,   98,
       14,   98,   16,   98,   17,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   30,   98,   31,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   49,
       98,   98,   98,   98,   98,   98,   98,   58,   98,   98,
       98,   98,   64,   98,   98,   66,   98,   98,   98,   98,

       71,   98,   12,   98,   14,   98,   16,   98,   17,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   30,   98,
       31,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   49,   98,   98,   98,   98,   98,   98,
       98,   58,   98,   98,   98,   98,   64,   98,   98,   66,
       98,   98,   98,   98,   71,   98,   98,  100,   98,   98,
       98,   21,   98,   23,   98,   98,   98,   28,   98,   29,
       98,   33,   98,   36,   98,   98,   98,   98,   98,   98,
       45,   98,   98,   98,   48,   98,   50,   98,   51,   98,
       52,   98,   54,   98,   55,   98,   98,   98,   62,   98,

       98,   98,   98,   98,   98,   98,  100,   98,   98,   98,
       21,   98,   23,   98,   98,   98,   28,   98,   29,   98,
       33,   98,   36,   98,   98,   98,   98,   98,   98,   45,
       98,   98,   98,   48,   98,   50,   98,   51,   98,   52,
       98,   54,   98,   55,   98,   98,   98,   62,   98,   98,
       98,   98,   98,   98,   98,   98,   20,   98,   98,   98,
       39,   98,   98,   98,   43,   98,   98,   98,   98,   98,
       98,   61,   98,   98,   98,   67,   98,   98,   70,   98,
       98,   98,   20,   98,   98,   98,   39,   98,   98,   98,
       43,   98,   98,   98,   98,   98,   98,   61,   98,   98,

       98,   67,   98,   98,   70,   98,   98,   19,   98,   98,
       27,   98,   98,   42,   98,   98,   46,   98,   98,   98,
       56,   98,   63,   98,   65,   98,   69,   98,   98,   19,
       98,   98,   27,   98,   98,   42,   98,   98,   46,   98,
       98,   98,   56,   98,   63,   98,   65,   98,   69,   98,
       98,   98,   40,   98,   44,   98,   98,   98,   98,   98,
       40,   98,   44,   98,   98,   98,   18,   98,   98,   98,
       98,   18,   98,   98,   98,   98,   98,   98,   53,   98,
       98,   98,   53,   98,   24,   98,   98,   24,   98,   98,
       98,   98,   98,   98,   98,   98,   47,   98,   47,   98

    } ;

static const flex_int16_t yy_accept[821] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   16,
       18,   21,   23,   25,   27,   29,   31,   34,   36,   38,
       40,   42,   45,   48,   50,   52,   55,   58,   61,   64,
       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  109,  111,  113,  116,  119,  121,
      124,  127,  129,  131,  134,  136,  138,  140,  142,  144,
      147,  149,  151,  153,  155,  158,  161,  163,  165,  168,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  213,  216,  219,  222,  224,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,

      236,  237,  238,  239,  240,  241,  242,  242,  243,  244,
      245,  246,  246,  247,  248,  249,  250,  251,  252,  253,
      253,  254,  255,  256,  257,  257,  257,  257,  258,  259,
      260,  261,  262,  263,  264,  265,  266,  267,  269,  270,
      271,  272,  273,  274,  275,  276,  277,  278,  280,  281,
      282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
      302,  303,  304,  305,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  325,  326,  326,  327,  328,  329,

      330,  330,  331,  332,  333,  334,  335,  336,  337,  337,
      338,  339,  340,  341,  341,  341,  341,  342,  343,  344,
      345,  346,  347,  348,  349,  350,  351,  353,  354,  355,
      356,  357,  358,  359,  360,  361,  362,  364,  365,  366,
      367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  391,  391,  392,  393,  393,
      393,  394,  394,  394,  395,  397,  398,  399,  400,  401,
      402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
      412,  413,  414,  415,  417,  418,  419,  420,  422,  423,

      424,  425,  427,  428,  429,  430,  431,  432,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457,  457,  457,  458,  459,  459,  459,  460,  460,
      460,  461,  463,  464,  465,  466,  467,  468,  469,  470,
      471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
      481,  483,  484,  485,  486,  488,  489,  490,  491,  493,
      494,  495,  496,  497,  498,  499,  500,  501,  502,  503,
      504,  505,  506,  507,  508,  509,  510,  512,  513,  514,
      515,  516,  517,  518,  519,  520,  521,  521,  521,  521,

      521,  522,  522,  522,  524,  526,  527,  529,  530,  532,
      533,  534,  535,  536,  537,  538,  539,  541,  543,  544,
      545,  546,  547,  548,  549,  551,  552,  554,  555,  556,
      557,  558,  559,  560,  561,  562,  563,  564,  565,  566,
      567,  568,  569,  570,  572,  573,  575,  576,  577,  578,
      579,  580,  582,  583,  584,  585,  585,  585,  585,  585,
      586,  586,  586,  588,  590,  591,  593,  594,  596,  597,
      598,  599,  600,  601,  602,  603,  605,  607,  608,  609,
      610,  611,  612,  613,  615,  616,  618,  619,  620,  621,
      622,  623,  624,  625,  626,  627,  628,  629,  630,  631,

      632,  633,  634,  636,  637,  639,  640,  641,  642,  643,
      644,  646,  647,  648,  649,  649,  649,  649,  649,  649,
      649,  651,  653,  655,  657,  658,  659,  660,  661,  662,
      663,  664,  665,  667,  669,  670,  671,  672,  673,  674,
      675,  676,  677,  678,  679,  680,  682,  683,  684,  685,
      686,  687,  688,  690,  691,  692,  693,  695,  696,  698,
      699,  700,  701,  703,  703,  703,  703,  703,  703,  703,
      705,  707,  709,  711,  712,  713,  714,  715,  716,  717,
      718,  719,  721,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  736,  737,  738,  739,  740,

      741,  742,  744,  745,  746,  747,  749,  750,  752,  753,
      754,  755,  757,  757,  757,  757,  757,  757,  759,  760,
      761,  762,  764,  766,  767,  768,  770,  772,  774,  776,
      777,  778,  779,  780,  781,  783,  784,  785,  787,  789,
      791,  793,  795,  797,  798,  799,  801,  802,  803,  804,
      805,  806,  806,  806,  806,  806,  806,  808,  809,  810,
      811,  813,  815,  816,  817,  819,  821,  823,  825,  826,
      827,  828,  829,  830,  832,  833,  834,  836,  838,  840,
      842,  844,  846,  847,  848,  850,  851,  852,  853,  854,
      855,  855,  855,  855,  856,  857,  859,  860,  861,  863,

      864,  865,  867,  868,  869,  870,  871,  872,  874,  875,
      876,  878,  879,  881,  881,  881,  881,  882,  883,  885,
      886,  887,  889,  890,  891,  893,  894,  895,  896,  897,
      898,  900,  901,  902,  904,  905,  907,  907,  907,  907,
      908,  910,  911,  913,  914,  916,  917,  919,  920,  921,
      923,  925,  927,  929,  929,  929,  929,  930,  932,  933,
      935,  936,  938,  939,  941,  942,  943,  945,  947,  949,
      951,  951,  951,  951,  952,  953,  955,  957,  958,  959,
      959,  959,  959,  960,  961,  963,  965,  966,  967,  967,
      967,  969,  970,  971,  972,  972,  972,  974,  975,  976,

      977,  978,  979,  981,  982,  983,  985,  987,  988,  990,
      991,  992,  993,  994,  995,  996,  997,  999, 1001, 1001
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,    1,   18,
       19,   20,   21,    1,   22,   22,   22,   22,   23,   22,
       24,   24,   24,   24,   24,   25,   24,   24,   24,   24,
       24,   24,   24,   24,   26,   24,   24,   24,   24,   24,
        1,   27,    1,   28,   29,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   24,   39,   40,   41,   42,
       43,   44,   24,   45,   46,   47,   48,   49,   50,   51,
       52,   53,    1,   54,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    4,    4,    1,    1,    1,    1,
        1,    4,    4,    5,    5,    5,    5,    1,    5,    4,
        4,    4,    4,    4,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[862] =
    {   0,
        0,   54, 1737, 1738, 1734, 1738, 1716,  104, 1715,  102,
      102, 1714,  101,  103,  103, 1713,  101, 1714,  107, 1711,
      113, 1702,  125,  148, 1709,   90,  100,  119,  121,  140,
      141,  115,  112,  117,  113,  158,  143,  162,  138,  167,
      174,  176,  182,  196,  122, 1724,  210, 1738,  147,  197,
     1723,  212,  224,  226,  218,  227,  236,  244,  231,  260,
      134,  233,  239,  312,  332,  235,  384,  385,  270,  274,
      360,  364,  366,  382, 1682,  285, 1681, 1675,  211, 1678,
      276, 1687,  399,  357,  280,  285,  293,  415, 1718, 1738,
      396, 1738,    0, 1738, 1738, 1738,  386, 1738,    0, 1738,

     1738, 1738, 1738, 1738, 1709, 1738, 1705,  416, 1738,  417,
      430,  404, 1738, 1698, 1738, 1738, 1738, 1697, 1688,  412,
      440,  438, 1738, 1699,    0,    0,    0, 1738,  421,  427,
      428,  394,  429,  431,  436,  441,  445,  150,  446,  432,
      443,  450,  452,  455,  454,  457,  459, 1686,  460,  462,
      463,  474,  466,  469,  475,  365,  481,  478,  484,  482,
      487,  495,  496,  497,  499,  502,  504,  505,  506,  520,
      524, 1738, 1738, 1709, 1738,  550, 1708, 1707,  555, 1706,
     1705, 1704, 1703, 1702, 1701,  552, 1700, 1699, 1698, 1697,
     1696, 1695, 1694,  556, 1693,  551,    0, 1692,    0,  527,

      560, 1691,  562, 1690, 1689, 1688,  564,    0,  565,  566,
      567, 1687,  569,  611,  632,  653, 1686, 1647, 1640, 1643,
     1651,  527, 1654, 1653, 1640,  495, 1633, 1638, 1633, 1630,
      531, 1637, 1633, 1630, 1636, 1626,    0,  540, 1630, 1624,
     1629, 1619, 1634,  547, 1636,  559, 1623,  552,  547, 1627,
     1623,  551,  372, 1619,  561, 1624, 1616,  560, 1623, 1621,
     1655, 1654, 1738, 1738,    0,    0, 1738, 1738,    0,    0,
     1641,    0,    0,    0, 1628,  574,  575,  582,  576,  584,
      577,  591,  592,  593,  594,  598,  605,  597,  609,  613,
      624,  603,  630, 1627,  625,  634,  643, 1626,  644,  652,

      662, 1625,  645,  646,  647,  651,  665,  666,  670,  671,
      672,  673,  674,  675,  677,  678,  679,  683,  685, 1624,
      686,  684,  690,  688,  682,  704,  705,  706,  707, 1647,
     1646,  733,  754, 1645, 1644,  775,  796,  735,  817,  838,
      859,    0, 1603, 1605, 1614, 1609, 1610, 1596, 1594,  693,
     1609, 1604, 1606, 1606, 1601, 1593,  701, 1599, 1586, 1601,
        0, 1596, 1586, 1590,    0, 1591, 1596, 1591,    0, 1579,
     1574, 1575, 1581, 1582, 1577, 1570, 1572, 1574, 1581, 1567,
     1565, 1565, 1567, 1564, 1566, 1574,    0, 1573, 1563, 1567,
     1562, 1556, 1569, 1571, 1570, 1559,    0,    0,    0,    0,

     1738,    0,    0, 1571, 1570,  715, 1569,  716, 1568,  725,
      731,  719,  724,  732,  733,  734, 1567, 1566,  754,  735,
      755,  767,  756,  772, 1565,  775, 1564,  789,  747,  794,
      795,  807,  777,  796,  808,  768,  809,  810,  816,  819,
      831,  835,  837, 1563,  838, 1562,  868,  856,  849,  851,
      818, 1561,  852,  857,  869,  896,  917,  938,  959, 1584,
      980, 1001,    0,    0, 1547,    0, 1548,    0, 1538, 1536,
     1544, 1533, 1533, 1539, 1537,    0,    0, 1539, 1531, 1530,
     1540, 1526, 1530,    0, 1529,    0, 1539, 1523, 1538, 1537,
     1532, 1527, 1518, 1516, 1517, 1514, 1526, 1516, 1520, 1525,

     1524, 1515,    0, 1504,    0,  867, 1511, 1516, 1515, 1502,
        0, 1502, 1503, 1513,    0,    0,    0,    0,    0,    0,
     1519, 1518, 1517,  886,  880,  877,  887,  889,  859,  893,
      897,  914, 1516, 1515,  909,  911,  919,  935,  908,  910,
      931,  951,  937,  953,  958, 1514,  971,  970,  974,  939,
      940,  991, 1513,  992,  995, 1000, 1512,  998, 1483, 1011,
      938,  980, 1478, 1027, 1048, 1069, 1090, 1111, 1132,    0,
        0,    0, 1468, 1454, 1455, 1460, 1459, 1454, 1457, 1441,
     1445,    0,    0, 1453, 1451, 1436, 1431, 1427, 1426, 1440,
     1439, 1421, 1433, 1424,    0, 1432, 1429, 1423, 1407, 1416,

     1422,    0, 1417, 1417, 1417,    0, 1404,    0, 1415, 1406,
     1414,    0,    0,    0,    0,    0,    0, 1407, 1012,  972,
      961, 1406, 1405, 1019, 1010, 1404, 1403, 1402, 1399, 1018,
     1026, 1045, 1020, 1028, 1398, 1039, 1041, 1397, 1396, 1395,
     1038, 1386, 1385, 1042, 1060, 1384, 1049, 1080, 1069, 1070,
     1047, 1153, 1174, 1195, 1216, 1237,    0, 1378, 1361, 1361,
        0,    0, 1373, 1366,    0,    0,    0,    0, 1369, 1372,
     1358, 1358, 1344,    0, 1356, 1344,    0,    0,    0, 1359,
        0,    0, 1340, 1349,    0, 1342, 1348, 1341, 1340, 1324,
        0,    0,    0, 1081, 1101, 1343, 1088, 1071, 1342, 1104,

     1092, 1341, 1105, 1111, 1113, 1126, 1125, 1340, 1143, 1145,
     1339, 1146, 1336, 1258, 1279, 1300, 1332, 1327,    0, 1331,
     1312,    0, 1318, 1304,    0, 1314, 1302, 1302, 1313, 1308,
        0, 1307, 1307,    0, 1305,    0,    0,    0,    0, 1103,
     1311, 1147, 1302, 1164, 1301, 1166, 1300, 1155, 1165, 1299,
     1298, 1297, 1294, 1321, 1342, 1363, 1274,    0, 1287,    0,
     1284,    0, 1284,    0, 1263, 1277,    0,    0,    0,    0,
        0,    0,    0, 1124, 1185, 1279, 1278, 1167, 1175, 1384,
     1405, 1426, 1257, 1273,    0,    0, 1266, 1253,    0,    0,
     1271, 1176, 1134, 1186, 1447, 1468,    0, 1251, 1249, 1240,

     1187, 1208, 1259, 1238, 1255,    0, 1256, 1192,    0, 1250,
     1193, 1249, 1209, 1232, 1214, 1230, 1249,    0, 1738, 1503,
     1508, 1511, 1513, 1518, 1523, 1528, 1533, 1271, 1262, 1261,
     1260, 1259, 1258, 1254, 1253, 1252, 1250, 1241, 1240, 1239,
     1238, 1236, 1212, 1156, 1146, 1125, 1112, 1089, 1073, 1025,
      939,  930,  904,  876,  834,  792,  741,  325,  245,  202,
      110
    } ;

static const flex_int16_t yy_def[862] =
    {   0,
      819,  819,  819,  819,  819,  819,  819,  820,  819,  819,
      821,  819,  819,  819,  819,  819,  822,  819,  819,  819,
      819,  823,  823,  819,  819,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  819,  824,  824,  819,  824,  825,
      826,  824,  824,  827,  824,  824,  824,  824,  824,  819,
      824,  824,  824,  824,  819,   65,  824,  824,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,  824,  819,  819,
      820,  819,  820,  819,  819,  819,  821,  819,  821,  819,

      819,  819,  819,  819,  819,  819,  819,  822,  819,  822,
      822,  819,  819,  819,  819,  819,  819,  819,  823,  819,
      820,  821,  819,  819,  828,  829,  830,  819,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  819,  819,  824,  819,  824,  826,  824,  825,  824,
      825,  826,  824,  824,  824,  827,  824,  827,  824,  824,
      824,  824,  824,  824,  824,  824,   60,  824,   60,   60,

      824,  824,  824,  824,  824,  824,  824,   65,  824,  825,
      827,  824,  824,  824,  214,  214,  824,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      824,  824,  819,  819,  831,  832,  819,  819,  833,  834,
      819,  835,  836,  830,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  824,
      824,  214,  214,  824,  824,  214,  214,  824,  214,  214,
      214,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,  837,  838,  839,  840,

      819,  841,  842,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  214,  214,  214,  214,  824,
      214,  214,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,  843,  844,  845,  846,  847,  848,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  214,  214,  214,  214,  214,  214,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,  849,  850,  851,  852,  853,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  214,  214,  214,  214,  214,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      854,  855,  856,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  214,  214,  214,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,  857,  858,  859,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  214,  214,  214,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      860,  861,  848,  823,  823,  823,  823,  823,  823,  214,
      214,  214,   65,   65,   65,   65,   65,   65,  850,  852,
      823,  823,  823,  823,  214,  214,   65,   65,   65,   65,

      823,  823,  823,   65,   65,   65,  823,  823,   65,   65,
      823,   65,  823,   65,  823,   65,  823,   65,    0,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819
    } ;

static const flex_int16_t yy_nxt[1793] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   17,   18,   19,   20,   21,
        4,   22,   22,   22,   23,   22,   24,   25,   22,   26,
       27,   28,   29,   30,   31,   32,   22,   33,   22,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       22,   22,   22,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   60,
       61,   62,   63,   64,   46,   65,   65,   65,   66,   65,
       67,   68,   65,   69,   70,   71,   72,   73,   74,   75,
       65,   76,   65,   77,   78,   79,   80,   81,   82,   83,

       84,   85,   86,   87,   65,   65,   65,   88,   92,   95,
       98,  101,  106,  790,  103,  107,  120,  108,  108,  102,
       96,  104,  105,  111,  114,  115,  120,  112,   99,  121,
       93,  117,  118,  122,  111,  129,  175,  130,  120,  120,
      172,  120,  131,  120,  132,  120,  148,  120,  133,  175,
      202,  120,  123,  149,  137,  134,  123,  147,  135,  150,
      151,  136,  124,  138,  120,  178,  120,  120,  123,  120,
      143,  157,  139,  125,  123,  173,  120,  123,  123,  140,
      144,  141,  123,  145,  120,  146,  154,  152,  120,  123,
      142,  153,  123,  120,  123,  126,  123,  286,  127,  175,

      120,  180,  120,  158,  159,  789,  155,  162,  120,  156,
      163,  176,  175,  160,  175,  177,  161,  166,  164,  168,
      175,  167,  120,  181,  169,  165,  175,  170,  175,  175,
      183,  184,  171,  175,  187,  175,  189,  190,  175,  210,
      241,  175,  185,  211,  242,  191,  175,  192,  773,  198,
      203,  204,  188,  195,  193,  194,  196,  205,  197,  197,
      174,  174,  175,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  199,  174,  199,  199,  174,  174,  174,  174,
      174,  199,  200,  199,  199,  199,  201,  174,  199,  199,
      199,  199,  199,  200,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  174,  175,  218,  220,  219,  221,  237,
      244,  255,  257,  245,  259,  256,  238,  258,  772,  260,
      206,  207,  174,  174,  175,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  208,  208,  174,  174,
      174,  174,  174,  208,  208,  208,  208,  208,  209,  174,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  174,  175,  175,  212,  222,
      251,  120,  212,  252,   98,  306,  223,  226,  213,  224,

       92,  253,  225,  217,  212,  229,  227,  230,  254,  214,
      212,  232,   99,  212,  212,  228,  231,  175,  212,  386,
      120,  233,   93,  387,  234,  212,  235,  278,  212,  265,
      212,  215,  212,  261,  216,  247,  248,  269,  111,  111,
      110,  110,  112,  112,   92,  249,   98,  120,  250,  111,
      111,  266,  111,  120,  120,  120,  112,  120,  120,  270,
      281,  275,  120,  111,   99,  282,   93,  120,  262,  120,
      277,  120,  120,  276,  279,  280,  120,  288,  120,  284,
      120,  120,  283,  120,  285,  120,  120,  287,  120,  120,
      289,  292,  120,  290,  295,  120,  291,  293,  294,  297,

      120,  120,  303,  299,  120,  296,  298,  120,  120,  300,
      120,  313,  304,  120,  301,  302,  307,  305,  308,  311,
      310,  120,  120,  120,  315,  120,  314,  309,  120,  351,
      120,  120,  120,  317,  352,  316,  312,  199,  199,  322,
      318,  324,  321,  326,  319,  327,  120,  323,  320,  325,
      120,  176,  175,  175,  175,  177,  328,  175,  175,  180,
      187,  329,  175,  331,  175,  330,  175,  175,  175,  175,
      180,  175,  346,  347,  357,  187,  380,  358,  188,  364,
      334,  181,  335,  338,  371,  332,  365,  378,  384,  372,
      336,  381,  181,  188,  374,  385,  375,  393,  389,  394,

      120,  120,  120,  120,  379,  376,  390,  333,  120,  407,
      120,  406,  337,  175,  405,  408,  404,  120,  120,  120,
      120,  409,  413,  120,  120,  339,  339,  414,  415,  120,
      417,  120,  339,  339,  416,  120,  410,  411,  412,  120,
      339,  339,  339,  339,  339,  339,  340,  340,  422,  418,
      120,  120,  419,  340,  340,  420,  120,  421,  424,  423,
      120,  340,  340,  340,  340,  340,  340,  341,  341,  120,
      120,  120,  120,  120,  341,  341,  425,  120,  120,  427,
      426,  428,  341,  341,  341,  341,  341,  341,  120,  430,
      433,  120,  120,  432,  431,  429,  120,  120,  120,  120,

      120,  120,  434,  120,  120,  120,  439,  435,  120,  120,
      120,  120,  120,  438,  120,  437,  120,  436,  446,  447,
      440,  443,  441,  442,  444,  445,  448,  449,  451,  450,
      120,  120,  120,  120,  453,  454,  452,  175,  470,  471,
      478,  120,  120,  479,  771,  120,  455,  456,  456,  460,
      120,  120,  522,  521,  456,  456,  525,  120,  120,  120,
      120,  120,  456,  456,  456,  456,  456,  456,  457,  457,
      523,  526,  528,  120,  529,  457,  457,  524,  527,  531,
      120,  120,  120,  457,  457,  457,  457,  457,  457,  458,
      458,  530,  538,  120,  120,  739,  458,  458,  120,  532,

      533,  120,  534,  120,  458,  458,  458,  458,  458,  458,
      459,  459,  545,  535,  542,  120,  536,  459,  459,  537,
      120,  120,  120,  539,  540,  459,  459,  459,  459,  459,
      459,  461,  461,  120,  120,  120,  120,  738,  461,  461,
      541,  543,  120,  547,  120,  120,  461,  461,  461,  461,
      461,  461,  462,  462,  544,  546,  549,  120,  548,  462,
      462,  120,  550,  120,  120,  560,  551,  462,  462,  462,
      462,  462,  462,  341,  341,  120,  552,  120,  120,  737,
      341,  341,  120,  120,  558,  120,  559,  553,  341,  341,
      341,  341,  341,  341,  120,  120,  624,  557,  561,  603,

      554,  562,  563,  120,  604,  555,  120,  693,  605,  556,
      564,  564,  120,  120,  619,  120,  621,  564,  564,  120,
      622,  620,  623,  120,  625,  564,  564,  564,  564,  564,
      564,  565,  565,  119,  120,  120,  120,  120,  565,  565,
      120,  628,  692,  626,  629,  120,  565,  565,  565,  565,
      565,  565,  566,  566,  632,  627,  633,  120,  630,  566,
      566,  120,  634,  120,  120,  120,  120,  566,  566,  566,
      566,  566,  566,  567,  567,  650,  643,  120,  631,  120,
      567,  567,  635,  636,  120,  642,  637,  120,  567,  567,
      567,  567,  567,  567,  568,  568,  120,  120,  120,  638,

      120,  568,  568,  639,  640,  641,  120,  696,  651,  568,
      568,  568,  568,  568,  568,  569,  569,  120,  120,  695,
      644,  120,  569,  569,  120,  645,  120,  646,  110,  647,
      569,  569,  569,  569,  569,  569,  120,  120,  120,  648,
      649,  652,  652,  694,  120,  120,  120,  698,  652,  652,
      697,  699,  120,  702,  120,  700,  652,  652,  652,  652,
      652,  652,  653,  653,  120,  120,  706,  120,  120,  653,
      653,  120,  704,  120,  703,  120,  691,  653,  653,  653,
      653,  653,  653,  654,  654,  705,  120,  701,  707,  709,
      654,  654,  618,  713,  708,  120,  120,  120,  654,  654,

      654,  654,  654,  654,  655,  655,  120,  120,  711,  712,
      740,  655,  655,  710,  120,  617,  742,  743,  120,  655,
      655,  655,  655,  655,  655,  656,  656,  120,  616,  120,
      120,  120,  656,  656,  741,  744,  745,  120,  746,  120,
      656,  656,  656,  656,  656,  656,  657,  657,  774,  615,
      120,  120,  120,  657,  657,  747,  748,  749,  750,  614,
      120,  657,  657,  657,  657,  657,  657,  714,  714,  120,
      791,  120,  120,  120,  714,  714,  751,  752,  775,  753,
      802,  120,  714,  714,  714,  714,  714,  714,  199,  199,
      120,  120,  120,  120,  779,  199,  199,  776,  777,  778,

      793,  120,  120,  199,  199,  199,  199,  199,  199,  715,
      715,  120,  120,  120,  792,  613,  715,  715,  120,  120,
      794,  801,  813,  811,  715,  715,  715,  715,  715,  715,
      208,  208,  803,  807,  120,  120,  808,  208,  208,  520,
      120,  519,  518,  517,  516,  208,  208,  208,  208,  208,
      208,  716,  716,  515,  815,  403,  402,  400,  716,  716,
      817,  399,  398,  397,  274,  273,  716,  716,  716,  716,
      716,  716,  754,  754,  272,  120,  818,  816,  814,  754,
      754,  812,  120,  810,  809,  120,  806,  754,  754,  754,
      754,  754,  754,  755,  755,  805,  804,  120,  800,  799,

      755,  755,  798,  797,  120,  120,  788,  787,  755,  755,
      755,  755,  755,  755,  756,  756,  786,  785,  784,  783,
      120,  756,  756,  120,  120,  120,  120,  120,  120,  756,
      756,  756,  756,  756,  756,  780,  780,  120,  770,  769,
      768,  767,  780,  780,  766,  765,  764,  763,  762,  761,
      780,  780,  780,  780,  780,  780,  781,  781,  760,  759,
      758,  757,  120,  781,  781,  120,  120,  120,  120,  120,
      736,  781,  781,  781,  781,  781,  781,  782,  782,  735,
      734,  733,  732,  731,  782,  782,  730,  729,  728,  727,
      726,  725,  782,  782,  782,  782,  782,  782,  795,  795,

      724,  723,  722,  721,  720,  795,  795,  719,  718,  717,
      120,  120,  120,  795,  795,  795,  795,  795,  795,  796,
      796,  120,  120,  120,  120,  120,  796,  796,  120,  120,
      120,  120,  120,  120,  796,  796,  796,  796,  796,  796,
      657,  657,  690,  689,  688,  687,  686,  657,  657,  685,
      684,  683,  682,  681,  680,  657,  657,  657,  657,  657,
      657,  199,  199,  679,  678,  677,  676,  675,  199,  199,
      674,  673,  672,  671,  670,  669,  199,  199,  199,  199,
      199,  199,  208,  208,  668,  667,  666,  665,  664,  208,
      208,  663,  662,  661,  660,  659,  658,  208,  208,  208,

      208,  208,  208,   91,  120,   91,   91,   91,   97,  120,
       97,   97,   97,  110,  110,  110,  119,  119,  174,  174,
      174,  174,  174,  179,  179,  179,  179,  179,  182,  182,
      182,  182,  182,  186,  186,  186,  186,  186,  120,  120,
      120,  120,  120,  120,  120,  120,  612,  611,  610,  609,
      608,  607,  606,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  175,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  514,  513,

      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  477,  476,  475,  474,  473,  472,  469,
      468,  467,  466,  465,  464,  463,  175,  175,  175,  175,
      120,  120,  120,  120,  120,  401,  175,  175,  396,  395,
      392,  391,  388,  383,  382,  377,  373,  370,  369,  368,
      367,  366,  363,  362,  361,  360,  359,  356,  355,  354,
      353,  350,  349,  348,  345,  344,  343,  342,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  120,  271,  120,  268,  267,  264,  263,   89,
      246,  243,  240,  239,  236,  175,  175,  128,  120,  116,
      113,  109,  100,   94,   90,   89,  819,    3,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819

    } ;

static const flex_int16_t yy_chk[1793] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    8,   10,
       11,   13,   15,  861,   14,   15,   26,   15,   15,   13,
       10,   14,   14,   17,   19,   19,   27,   17,   11,   23,
        8,   21,   21,   23,   17,   26,   61,   26,   33,   35,
       45,   32,   27,   34,   27,   28,   33,   29,   28,   49,
       61,   23,   24,   33,   29,   28,   24,   32,   28,   34,
       35,   28,   24,   29,   39,   49,   30,   31,   24,   37,
       31,   39,   29,   24,   24,   45,  138,   24,   24,   30,
       31,   30,   24,   31,   36,   31,   37,   36,   38,   24,
       30,   36,   24,   40,   24,   24,   24,  138,   24,   50,

       41,   50,   42,   40,   40,  860,   38,   41,   43,   38,
       41,   47,   47,   40,   52,   47,   40,   42,   41,   43,
       55,   42,   44,   50,   43,   41,   53,   44,   54,   56,
       52,   53,   44,   59,   54,   62,   55,   56,   57,   66,
       79,   63,   53,   66,   79,   56,   58,   57,  859,   59,
       62,   62,   54,   58,   57,   57,   58,   63,   58,   58,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   64,   69,   70,   69,   70,   76,
       81,   85,   86,   81,   87,   85,   76,   86,  858,   87,
       64,   64,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   67,   68,   67,   71,
       84,  156,   67,   84,   97,  156,   71,   72,   67,   71,

       91,   84,   71,   68,   67,   73,   72,   73,   84,   67,
       67,   74,   97,   67,   67,   72,   73,   88,   67,  253,
      132,   74,   91,  253,   74,   67,   74,  132,   67,  112,
       67,   67,   67,   88,   67,   83,   83,  120,  108,  110,
      111,  111,  108,  110,  121,   83,  122,  129,   83,  108,
      110,  112,  111,  130,  131,  133,  111,  134,  140,  120,
      134,  129,  135,  111,  122,  135,  121,  136,   88,  141,
      131,  137,  139,  130,  133,  133,  142,  140,  143,  137,
      145,  144,  136,  146,  137,  147,  149,  139,  150,  151,
      141,  143,  153,  142,  146,  154,  142,  144,  145,  149,

      152,  155,  154,  150,  158,  147,  149,  157,  160,  151,
      159,  160,  155,  161,  152,  153,  157,  155,  157,  159,
      158,  162,  163,  164,  161,  165,  160,  157,  166,  226,
      167,  168,  169,  163,  226,  162,  159,  200,  200,  166,
      163,  167,  165,  169,  164,  169,  170,  166,  164,  168,
      171,  176,  176,  196,  186,  176,  170,  179,  194,  179,
      186,  171,  201,  196,  203,  194,  207,  209,  210,  211,
      210,  213,  222,  222,  231,  211,  249,  231,  186,  238,
      203,  179,  207,  213,  244,  201,  238,  248,  252,  244,
      209,  249,  210,  211,  246,  252,  246,  258,  255,  258,

      276,  277,  279,  281,  248,  246,  255,  201,  278,  279,
      280,  278,  209,  214,  277,  280,  276,  282,  283,  284,
      285,  281,  284,  288,  286,  214,  214,  285,  286,  292,
      288,  287,  214,  214,  287,  289,  282,  283,  283,  290,
      214,  214,  214,  214,  214,  214,  215,  215,  292,  289,
      291,  295,  290,  215,  215,  290,  293,  291,  295,  293,
      296,  215,  215,  215,  215,  215,  215,  216,  216,  297,
      299,  303,  304,  305,  216,  216,  296,  306,  300,  299,
      297,  300,  216,  216,  216,  216,  216,  216,  301,  303,
      306,  307,  308,  305,  304,  301,  309,  310,  311,  312,

      313,  314,  307,  315,  316,  317,  312,  308,  325,  318,
      322,  319,  321,  311,  324,  310,  323,  309,  319,  321,
      313,  316,  314,  315,  317,  318,  322,  323,  325,  324,
      326,  327,  328,  329,  327,  328,  326,  338,  350,  350,
      357,  406,  408,  357,  857,  412,  329,  332,  332,  338,
      413,  410,  408,  406,  332,  332,  412,  411,  414,  415,
      416,  420,  332,  332,  332,  332,  332,  332,  333,  333,
      410,  413,  415,  429,  416,  333,  333,  411,  414,  420,
      419,  421,  423,  333,  333,  333,  333,  333,  333,  336,
      336,  419,  429,  422,  436,  856,  336,  336,  424,  421,

      422,  426,  423,  433,  336,  336,  336,  336,  336,  336,
      337,  337,  436,  424,  433,  428,  426,  337,  337,  428,
      430,  431,  434,  430,  431,  337,  337,  337,  337,  337,
      337,  339,  339,  432,  435,  437,  438,  855,  339,  339,
      432,  434,  439,  438,  451,  440,  339,  339,  339,  339,
      339,  339,  340,  340,  435,  437,  440,  441,  439,  340,
      340,  442,  441,  443,  445,  451,  442,  340,  340,  340,
      340,  340,  340,  341,  341,  449,  443,  450,  453,  854,
      341,  341,  448,  454,  449,  529,  450,  445,  341,  341,
      341,  341,  341,  341,  447,  455,  529,  448,  453,  506,

      447,  454,  455,  526,  506,  447,  525,  853,  506,  447,
      456,  456,  524,  527,  524,  528,  526,  456,  456,  530,
      527,  525,  528,  531,  530,  456,  456,  456,  456,  456,
      456,  457,  457,  852,  539,  535,  540,  536,  457,  457,
      532,  535,  851,  531,  536,  537,  457,  457,  457,  457,
      457,  457,  458,  458,  539,  532,  540,  541,  537,  458,
      458,  538,  541,  543,  561,  550,  551,  458,  458,  458,
      458,  458,  458,  459,  459,  561,  551,  542,  538,  544,
      459,  459,  542,  543,  545,  550,  544,  621,  459,  459,
      459,  459,  459,  459,  461,  461,  548,  547,  620,  545,

      549,  461,  461,  547,  548,  549,  562,  621,  562,  461,
      461,  461,  461,  461,  461,  462,  462,  552,  554,  620,
      552,  555,  462,  462,  558,  554,  556,  555,  850,  556,
      462,  462,  462,  462,  462,  462,  625,  560,  619,  558,
      560,  564,  564,  619,  630,  624,  633,  625,  564,  564,
      624,  630,  631,  633,  634,  631,  564,  564,  564,  564,
      564,  564,  565,  565,  641,  636,  641,  637,  644,  565,
      565,  632,  636,  651,  634,  647,  849,  565,  565,  565,
      565,  565,  565,  566,  566,  637,  645,  632,  644,  647,
      566,  566,  848,  651,  645,  649,  650,  698,  566,  566,

      566,  566,  566,  566,  567,  567,  648,  694,  649,  650,
      694,  567,  567,  648,  697,  847,  697,  698,  701,  567,
      567,  567,  567,  567,  567,  568,  568,  695,  846,  740,
      700,  703,  568,  568,  695,  700,  701,  704,  703,  705,
      568,  568,  568,  568,  568,  568,  569,  569,  740,  845,
      774,  707,  706,  569,  569,  704,  705,  706,  707,  844,
      793,  569,  569,  569,  569,  569,  569,  652,  652,  709,
      774,  710,  712,  742,  652,  652,  709,  710,  742,  712,
      793,  748,  652,  652,  652,  652,  652,  652,  653,  653,
      744,  749,  746,  778,  749,  653,  653,  744,  746,  748,

      778,  779,  792,  653,  653,  653,  653,  653,  653,  654,
      654,  775,  794,  801,  775,  843,  654,  654,  808,  811,
      779,  792,  811,  808,  654,  654,  654,  654,  654,  654,
      655,  655,  794,  801,  802,  813,  802,  655,  655,  842,
      815,  841,  840,  839,  838,  655,  655,  655,  655,  655,
      655,  656,  656,  837,  813,  836,  835,  834,  656,  656,
      815,  833,  832,  831,  830,  829,  656,  656,  656,  656,
      656,  656,  714,  714,  828,  817,  816,  814,  812,  714,
      714,  810,  807,  805,  804,  803,  800,  714,  714,  714,
      714,  714,  714,  715,  715,  799,  798,  791,  788,  787,

      715,  715,  784,  783,  777,  776,  766,  765,  715,  715,
      715,  715,  715,  715,  716,  716,  763,  761,  759,  757,
      753,  716,  716,  752,  751,  750,  747,  745,  743,  716,
      716,  716,  716,  716,  716,  754,  754,  741,  735,  733,
      732,  730,  754,  754,  729,  728,  727,  726,  724,  723,
      754,  754,  754,  754,  754,  754,  755,  755,  721,  720,
      718,  717,  713,  755,  755,  711,  708,  702,  699,  696,
      690,  755,  755,  755,  755,  755,  755,  756,  756,  689,
      688,  687,  686,  684,  756,  756,  683,  680,  676,  675,
      673,  672,  756,  756,  756,  756,  756,  756,  780,  780,

      671,  670,  669,  664,  663,  780,  780,  660,  659,  658,
      646,  643,  642,  780,  780,  780,  780,  780,  780,  781,
      781,  640,  639,  638,  635,  629,  781,  781,  628,  627,
      626,  623,  622,  618,  781,  781,  781,  781,  781,  781,
      782,  782,  611,  610,  609,  607,  605,  782,  782,  604,
      603,  601,  600,  599,  598,  782,  782,  782,  782,  782,
      782,  795,  795,  597,  596,  594,  593,  592,  795,  795,
      591,  590,  589,  588,  587,  586,  795,  795,  795,  795,
      795,  795,  796,  796,  585,  584,  581,  580,  579,  796,
      796,  578,  577,  576,  575,  574,  573,  796,  796,  796,

      796,  796,  796,  820,  563,  820,  820,  820,  821,  559,
      821,  821,  821,  822,  822,  822,  823,  823,  824,  824,
      824,  824,  824,  825,  825,  825,  825,  825,  826,  826,
      826,  826,  826,  827,  827,  827,  827,  827,  557,  553,
      546,  534,  533,  523,  522,  521,  514,  513,  512,  510,
      509,  508,  507,  504,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      485,  483,  482,  481,  480,  479,  478,  475,  474,  473,
      472,  471,  470,  469,  467,  465,  460,  452,  446,  444,
      427,  425,  418,  417,  409,  407,  405,  404,  396,  395,

      394,  393,  392,  391,  390,  389,  388,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  368,  367,  366,  364,  363,  362,
      360,  359,  358,  356,  355,  354,  353,  352,  351,  349,
      348,  347,  346,  345,  344,  343,  335,  334,  331,  330,
      320,  302,  298,  294,  275,  271,  262,  261,  260,  259,
      257,  256,  254,  251,  250,  247,  245,  243,  242,  241,
      240,  239,  236,  235,  234,  233,  232,  230,  229,  228,
      227,  225,  224,  223,  221,  220,  219,  218,  217,  212,
      206,  205,  204,  202,  198,  195,  193,  192,  191,  190,

      189,  188,  187,  185,  184,  183,  182,  181,  180,  178,
      177,  174,  148,  124,  119,  118,  114,  107,  105,   89,
       82,   80,   78,   77,   75,   51,   46,   25,   22,   20,
       18,   16,   12,    9,    7,    5,    3,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819

    } ;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[104] =
    {   0,
       43,   44,   46,   47,   49,   52,   53,   55,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  122,  123,  124,  125,  126,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
      141,  142,  143,  144,  145,  146,  148,  150,  152,  153,

      155,  156,  157
    } ;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "CxxLexer.l"
/*
 *	  Title:			Miniature lexer for C++ parser.
 *
 *	  File Name:		CxxLexer.l
 *
 *	  Author:			E.D.Willink
 *
 *	This is a complete lexer for C++, intended for use with CxxParser.y.
 *	All actions are done by macros, so that there is some chance that customisation
 *	can be performed within the bounds of the CxxLexing.hxx and CxxLexing.cxx
 *	include files.
 *END
 */
#line 15 "CxxLexer.l"
#include <CxxLexing.hxx>
#line 1345 "<stdout>"
#line 1346 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 42 "CxxLexer.l"

#line 1637 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 820 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1738 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

find_rule: /* we branch to this label when backing up */

		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 104 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 104 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 105 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 43 "CxxLexer.l"
{ LEX_SAVE_LINE(yytext, yyleng); REJECT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 44 "CxxLexer.l"
{ /* Throw away preprocessor lines - hopefully only #line and equivalent. */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 46 "CxxLexer.l"
{ LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 47 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate character with trailing escape.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate character.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng); };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "CxxLexer.l"
{ LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate string with trailing escape.");
								  LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 55 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate string.");
								  LEX_STRING_TOKEN(yytext, yyleng); };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 58 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASM); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 59 "CxxLexer.l"
{ LEX_STATIC_TOKEN(AUTO); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 60 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(BOOL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "CxxLexer.l"
{ LEX_STATIC_TOKEN(BREAK); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "CxxLexer.l"
{ LEX_STATIC_TOKEN(CASE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(CATCH); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "CxxLexer.l"
{ LEX_STATIC_TOKEN(CHAR); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(CLASS); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "CxxLexer.l"
{ LEX_STATIC_TOKEN(CONST); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(CONST_CAST); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "CxxLexer.l"
{ LEX_STATIC_TOKEN(CONTINUE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DEFAULT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(DELETE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 71 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 72 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DOUBLE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 73 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(DYNAMIC_CAST); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ELSE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 75 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ENUM); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 76 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(EXPLICIT); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(EXPORT); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "CxxLexer.l"
{ LEX_STATIC_TOKEN(EXTERN); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(FALSE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "CxxLexer.l"
{ LEX_STATIC_TOKEN(FLOAT); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "CxxLexer.l"
{ LEX_STATIC_TOKEN(FOR); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "CxxLexer.l"
{ LEX_STATIC_TOKEN(FRIEND); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "CxxLexer.l"
{ LEX_STATIC_TOKEN(GOTO); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "CxxLexer.l"
{ LEX_STATIC_TOKEN(IF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(INLINE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "CxxLexer.l"
{ LEX_STATIC_TOKEN(INT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LONG); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(MUTABLE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(NAMESPACE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 90 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(NEW); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 91 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(OPERATOR); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 92 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(PRIVATE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 93 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(PROTECTED); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 94 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(PUBLIC); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 95 "CxxLexer.l"
{ LEX_STATIC_TOKEN(REGISTER); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 96 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(REINTERPRET_CAST); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 97 "CxxLexer.l"
{ LEX_STATIC_TOKEN(RETURN); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 98 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHORT); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 99 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(SIGNED); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 100 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SIZEOF); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 101 "CxxLexer.l"
{ LEX_STATIC_TOKEN(STATIC); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 102 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(STATIC_CAST); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 103 "CxxLexer.l"
{ LEX_STATIC_TOKEN(STRUCT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 104 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SWITCH); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 105 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(TEMPLATE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 106 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(THIS); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 107 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(THROW); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 108 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(TRUE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 109 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(TRY); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 110 "CxxLexer.l"
{ LEX_STATIC_TOKEN(TYPEDEF); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 111 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(TYPEID); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 112 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(TYPENAME); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 113 "CxxLexer.l"
{ LEX_STATIC_TOKEN(UNION); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 114 "CxxLexer.l"
{ LEX_STATIC_TOKEN(UNSIGNED); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 115 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(USING); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 116 "CxxLexer.l"
{ LEX_STATIC_TOKEN(VIRTUAL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 117 "CxxLexer.l"
{ LEX_STATIC_TOKEN(VOID); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 118 "CxxLexer.l"
{ LEX_STATIC_TOKEN(VOLATILE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 119 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(WCHAR_T); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 120 "CxxLexer.l"
{ LEX_STATIC_TOKEN(WHILE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 122 "CxxLexer.l"
{ LEX_C_STATIC_TOKEN(SCOPE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 123 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ELLIPSIS); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHR); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "CxxLexer.l"
{ LEX_STATIC_TOKEN(EQ); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "CxxLexer.l"
{ LEX_STATIC_TOKEN(NE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 128 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 129 "CxxLexer.l"
{ LEX_STATIC_TOKEN(GE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 130 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LOG_AND); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 131 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LOG_OR); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 132 "CxxLexer.l"
{ LEX_STATIC_TOKEN(INC); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 133 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DEC); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 134 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ARROW_STAR); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 135 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ARROW); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 136 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DOT_STAR); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 137 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_ADD); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 138 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SUB); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 139 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_MUL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 140 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_DIV); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 141 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_MOD); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 142 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_XOR); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 143 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_AND); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 144 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_OR); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 145 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SHR); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 146 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SHL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 148 "CxxLexer.l"
{ LEX_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 150 "CxxLexer.l"
{ LEX_IDENTIFIER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 99:
#line 153 "CxxLexer.l"
case 100:
YY_RULE_SETUP
#line 153 "CxxLexer.l"
{ LEX_ESCAPED_TOKEN(yytext, yyleng); }
	YY_BREAK
case 101:
/* rule 101 can match eol */
#line 156 "CxxLexer.l"
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 156 "CxxLexer.l"
ECHO;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "CxxLexer.l"
{ LEX_ASCII_TOKEN(yytext[0]); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 159 "CxxLexer.l"
ECHO;
	YY_BREAK
#line 2244 "<stdout>"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 820 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 820 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 819);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 159 "CxxLexer.l"

#include <CxxLexing.cxx>

